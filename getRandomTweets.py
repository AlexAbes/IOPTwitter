#!/usr/bin/env python
'''
Get a random set of tweets concerning a candidate from a dictionary of the sort created by findTextByName.py
Usage: python getRandomTweets.py candidateDictionary CandidateName number_of_tweets
where candidateDictionary is the name of a file generated by findTextByName.py, of either full tweets or objects
    CandidateName is the name of one of the candidates that is an index to the dictionary pickled in candidateDictionary
    number_of_tweets is a string representation of an integer that is the number of randomly picked tweets for the
        candidate

'''
import candidate_twt
import sys, cPickle, random, json

def get_rand_tweets(td, cand, t_num):
    '''
    Given a dictionary indexed by candidate name and containing a list of either full tweets or the distilled candidate_twt
    objects for that candidate, pick a random set and print out the tweet. Note that if there are fewer entries in the
    list than tweets requested, the number to be printed out will be set to the number in the list. Given that the
    selection is random, this may mean that some tweets are printed more than once (which is the case anyway, but more
    likely at the number of tweets requested approaches the number of tweets in the list.
    :param td: A dictionary of the form produced by findTextByName.py
    :param cand:  The name of the candidate whose tweets should be sampled
    :param t_num: The number of tweets to print out
    :return: None
    '''
    if cand not in td:
        print 'no candidate records for', candidate
        exit(1)

    t_list = td[cand]
    t_total = len(t_list)
    if t_total < t_list:
        print 'list of tweets less than the number of tweets requested; printing ', t_total
        t_num = t_total

    print cand, t_total
    for i in range(0,t_num):
        r_ind = random.randint(0, t_total - 1)
        if isinstance(t_list[r_ind], candidate_twt.candidate_rec):
            print t_list[r_ind].get_text()
        else:
            js = json.loads(t_list[r_ind])
            print js['text']
    return None

def main():
    '''
    The main() function. This function will get the name of the pickled dictionary file, open the file, re-create the
    dictionary, and then close the pickle file. It will also get the name of the candidate of interest, and the
    number of random tweets that the user wants.
    '''
    fname = sys.argv[1]
    fin = open(fname, 'rU')
    t_dict = cPickle.load(fin)
    fin.close()

    candidate = sys.argv[2]
    tweet_num = int(sys.argv[3])
    get_rand_tweets(t_dict, candidate, tweet_num)

if __name__ == '__main__':
    main()
